<launch>
    <!--dimension of the space 2 or 3-->
    <arg name="dim" value="3"/>
    <!--scale of the space-->
    <arg name="scale" value="40"/>
    <arg name="As_neighbors" value="B"/>
    <arg name="Bs_neighbors" value="A_C"/>
    <arg name="Cs_neighbors" value="B"/>
    <!--<arg name="Cs_neighbors" value="A"/>-->
    <param name="As_vendor" value="flightgear"/>
    <param name="Bs_vendor" value="flightgear"/>
    <param name="Cs_vendor" value="flightgear"/>

    <param name="As_type" value="quad"/>
    <param name="Bs_type" value="ufo"/>
    <param name="Cs_type" value="quad"/>

    <param name="As_instance" value="1"/>
    <param name="Bs_instance" value="2"/>
    <param name="Cs_instance" value="3"/>

    <param name="dim" value="$(arg dim)"/>
    <param name="scale" value="$(arg scale)"/>

    <group ns="UAV">
        <node name="A" pkg="cloud_map" type="uavA.py" respawn="false" output="screen">
            <param name="name" value="A"/>
            <param name="neighbors" value="$(arg As_neighbors)"/>
        </node>
        <node name="B" pkg="cloud_map" type="uavB.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
        </node>

        <node name="C" pkg="cloud_map" type="uavC.py" respawn="false" output="screen">
            <param name="name" value="C"/>
            <param name="neighbors" value="$(arg Cs_neighbors)"/>
        </node>

        <node name="heart_bit_fly" pkg="cloud_map" type="heart_bit_fly.py" output="screen"></node>
    </group>

    <group ns="Visual">
        <!--based on the dimension appropriate visualization will be generated-->
        <node name="A" pkg="cloud_map" type="visualize_uavA.py" respawn="false" output="screen">
            <param name="name" value="A"/>
            <!--separate neighbour names by _ ; If A had B,C neighbour value="B_C"-->
            <param name="neighbors" value="$(arg As_neighbors)"/>
        </node>
        <node name="B" pkg="cloud_map" type="visualize_uavB.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
        </node>
        <node name="C" pkg="cloud_map" type="visualize_uavC.py" respawn="false" output="screen">
            <param name="name" value="C"/>
            <!--separate neighbour names by _ ; If A had B,C neighbour value="B_C"-->
            <param name="neighbors" value="$(arg Cs_neighbors)"/>
        </node>
        <!--<node name="T" pkg="cloud_map" type="visualize_Temp.py" respawn="false" output="screen"></node>-->
        <!--<node name="H" pkg="cloud_map" type="visualize_Humidity.py" respawn="false" output="screen"></node>-->
    </group>

    <group ns="PHI">
        <node name="A" pkg="cloud_map" type="phiA.py" respawn="false" output="screen">
            <param name="name" value="A"/>
            <param name="neighbors" value="$(arg As_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
        <node name="A_temp_change" pkg="cloud_map" type="phiA_temp_change.py" respawn="false" output="screen">
            <param name="name" value="A"/>
            <param name="neighbors" value="$(arg As_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
        <node name="A_avoid_collision" pkg="cloud_map" type="phiA_avoid_collision.py" respawn="false" output="screen">
            <param name="name" value="A"/>
            <param name="neighbors" value="$(arg As_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
        <node name="B" pkg="cloud_map" type="phiB.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision_humaninteresting_humanannoying"/>
        </node>
        <node name="B_hum_change" pkg="cloud_map" type="phiB_temp_change.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
        <node name="B_avoid_collision" pkg="cloud_map" type="phiB_avoid_collision.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision_humaninteresting_humanannoying"/>
        </node>
        <node name="B_human_intention" pkg="cloud_map" type="phiB_human_intention.py" respawn="false" output="screen">
            <param name="name" value="B"/>
            <param name="neighbors" value="$(arg Bs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision_humaninteresting_humanannoying"/>
        </node>
        <node name="C" pkg="dummy_cloud_map" type="phiC.py" respawn="false" output="screen">
            <param name="name" value="C"/>
            <param name="neighbors" value="$(arg Cs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
        <!--<node name="C_temp_change" pkg="dummy_cloud_map" type="phiC_temp_change.py" respawn="false" output="screen">-->
            <!--<param name="name" value="C"/>-->
            <!--<param name="neighbors" value="$(arg Cs_neighbors)"/>-->
            <!--&lt;!&ndash;separate by underscore token&ndash;&gt;-->
            <!--<param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>-->
        <!--</node>-->
        <node name="C_avoid_collision" pkg="dummy_cloud_map" type="phiC_avoid_collision.py" respawn="false" output="screen">
            <param name="name" value="C"/>
            <param name="neighbors" value="$(arg Cs_neighbors)"/>
            <!--separate by underscore token-->
            <param name="intent" value="unexplored_tempchange_boundary_avoidcollision"/>
        </node>
    </group>

    <group ns="flightgear">
        <param name="port_send" value="41000"/>
        <param name="port_recv" value="41100"/>
        <node name="A" pkg="cloud_map" type="fgA.py" respawn="false" output="screen"></node>
        <node name="B" pkg="cloud_map" type="fgB.py" respawn="false" output="screen"></node>
        <node name="C" pkg="cloud_map" type="fgC.py" respawn="false" output="screen"></node>
    </group>
    <group ns="fg_launcher">
        <node name="A" pkg="cloud_map" type="fgALauncher.py" respawn="false" output="screen"></node>
        <node name="B" pkg="cloud_map" type="fgBLauncher.py" respawn="false" output="screen"></node>
        <node name="C" pkg="cloud_map" type="fgCLauncher.py" respawn="false" output="screen"></node>
    </group>
    <group ns="fg_interface">
        <node name="A" pkg="cloud_map" type="fgA_pid.py" respawn="false" output="screen"></node>
        <node name="B" pkg="cloud_map" type="fgB_pid.py" respawn="false" output="screen"></node>
        <node name="C" pkg="cloud_map" type="fgC_pid.py" respawn="false" output="screen"></node>
    </group>

    <!--<group ns="Sensors">-->
        <!--<node name="A" pkg="cloud_map" type="temperature_phenomenon.py" respawn="false" output="screen">-->
            <!--<param name="name" value="A"/>-->
            <!--<param name="instance" value="1"/>-->
        <!--</node>-->
        <!--<node name="B" pkg="cloud_map" type="humidity_phenomenon.py" respawn="false" output="screen">-->
            <!--<param name="name" value="B"/>-->
            <!--<param name="instance" value="2"/>-->
        <!--</node>-->
    <!--</group>-->

</launch>
